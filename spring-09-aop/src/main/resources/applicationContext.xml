<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!--注册bean-->
    <bean id="userService" class="com.wang.service.UserServiceImpl"/>
    <bean id="log" class="com.wang.log.Log"/>
    <bean id="afterLog" class="com.wang.log.AfterLog"/>

    <!--方式一:使用原生Spring API接口-->
<!--    &lt;!&ndash;配置aop:需要导入aop的约束&ndash;&gt;-->
<!--    <aop:config>-->
<!--        &lt;!&ndash;切入点:pointCut  expression:表达式  execution(要执行的位置! 修饰值 返回值 类名 方法名 参数)-->
<!--        在使用spring框架配置AOP的时候，不管是通过XML配置文件还是注解的方式都需要定义pointcut”切入点”-->
<!--        例如定义切入点表达式 execution (* com.sample.service.impl..*. *(..))-->
<!--        execution()是最常用的切点函数，其语法如下所示：-->
<!--        整个表达式可以分为五个部分：-->
<!--        1、execution(): 表达式主体。-->
<!--        2、第一个*号：表示返回类型， *号表示所有的类型。-->
<!--        3、包名：表示需要拦截的包名，后面的两个句点表示当前包和当前包的所有子包，com.sample.service.impl包、子孙包下所有类的方法。-->
<!--        4、第二个*号：表示类名，*号表示所有的类。-->
<!--        5、*(..):最后这个星号表示方法名，*号表示所有的方法，后面括弧里面表示方法的参数，两个句点表示任何参数-->
<!--        &ndash;&gt;-->
<!--        <aop:pointcut id="pointCut" expression="execution(* com.wang.service.UserServiceImpl.*(..))"/>-->

<!--        &lt;!&ndash;执行环绕增加&ndash;&gt;-->
<!--        <aop:advisor advice-ref="log" pointcut-ref="pointCut"/> &lt;!&ndash;将"log"方法切入到"pointCut"这个位置执行&ndash;&gt;-->
<!--        <aop:advisor advice-ref="afterLog" pointcut-ref="pointCut"/> &lt;!&ndash;将"log"方法切入到"pointCut"这个位置执行&ndash;&gt;-->
<!--    </aop:config>-->

    <!--方式二:自定义类-->
<!--    <bean id="diy" class="com.wang.diy.DiyPointCut"/>-->

<!--    <aop:config>-->
<!--        &lt;!&ndash;自定义切面, ref 要引用的类&ndash;&gt;-->
<!--        <aop:aspect ref="diy">-->
<!--            &lt;!&ndash;切入点&ndash;&gt;-->
<!--            <aop:pointcut id="pointCut" expression="execution(* com.wang.service.UserServiceImpl.*(..))"/>-->
<!--            &lt;!&ndash;通知 在"pointCut" 前面执行 "diy"里面的"before"方法&ndash;&gt;-->
<!--            <aop:before method="before" pointcut-ref="pointCut"/>-->
<!--            &lt;!&ndash;在"pointCut" 后面执行 "diy"里面的"after"方法&ndash;&gt;-->
<!--            <aop:after method="after" pointcut-ref="pointCut"/>-->
<!--        </aop:aspect>-->
<!--    </aop:config>-->

    <!--方式三:使用注解方式实现-->
    <bean id="annotationPointCut" class="com.wang.diy.AnnotationPointCut"/>
    <!--开启注解支持      JDK(默认 proxy-target-class="false")      cglib(proxy-target-class="true")-->
    <aop:aspectj-autoproxy proxy-target-class="false"/>

</beans>